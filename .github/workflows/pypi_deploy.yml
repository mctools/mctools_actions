name: Build and deploy to PyPI

on:
  workflow_call:
    inputs:
      REPOSITORY:
        type: string
        description: The repository to build from
        required: true
      REF:
        type: string
        description: The repository tag/branch to use
        required: false
      DO_DEPLOY:
        type: boolean
        description: Do deploying to PyPI
        default: true
      ENVIRONMENT:
        type: string
        description: GitHub environment to use
      SKIP_EXISTING:
        type: boolean
        description: Allow failure due do duplicate when uploading
        default: true
    secrets:
      PYPI_API_TOKEN:
        required: true

jobs:
  preparations:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          repository: ${{ inputs.REPOSITORY }}
          ref: ${{ inputs.REF }}
          fetch-depth: 0

      - name: Get package version number
        id: version-number
        run: |
          pip install scikit-build
          VERSION_NUMBER=$(python setup.py --version)
          RAW_VERSION_NUMBER=$(cat ./VERSION) #x.y.z format even if z>=80
          echo "version_number=$VERSION_NUMBER" >> $GITHUB_OUTPUT
          echo "raw_version_number=$RAW_VERSION_NUMBER" >> $GITHUB_OUTPUT

      - name: Check being on a tagged commit
        id: check-for-tag
        run: |
          git describe --exact-match --tags HEAD --match 'v*' >/dev/null 2>&1 && ON_TAG=1 || ON_TAG=0
          echo "on_tag=$ON_TAG" >> $GITHUB_OUTPUT
    
      - name: Verify tag version number
        if: inputs.DO_DEPLOY && steps.check-for-tag.outputs.on_tag == '1'
        run: |
          TAG_VERSION_NUMBER=${TAG:1} #vx.y.z -> x.y.z
          if [[ "$TAG_VERSION_NUMBER" != "$RAW_VERSION_NUMBER" ]]; then
            echo "ERROR: The version number from the tag($TAG_VERSION_NUMBER) doesn't agree with the version number from the package($RAW_VERSION_NUMBER)! This can happen if the branch name is provided as ref insted of a tag."
            exit 1
          fi
        env:
          RAW_VERSION_NUMBER: ${{ steps.version-number.outputs.raw_version_number }}
          TAG: ${{ inputs.REF }}

      - name: Install cibuildwheel
        run: pip install cibuildwheel

      - name: Generate setup matrix
        id: create-matrix
        run: |
          sudo apt-get install -y jq
          MATRIX=$(python3 -c "import subprocess, json; \
          linux_identifiers = subprocess.check_output('cibuildwheel --print-build-identifiers --platform linux', shell=True).decode().splitlines(); \
          macos_identifiers = subprocess.check_output('cibuildwheel --print-build-identifiers --platform macos', shell=True).decode().splitlines(); \
          setups = [{'os': 'ubuntu-latest', 'identifier': i} for i in linux_identifiers] + \
                   [{'os': 'macos-latest',  'identifier': i} for i in macos_identifiers]; \
          print(json.dumps(setups));")
          echo "setup_matrix={\"include\":$MATRIX}" >> $GITHUB_OUTPUT
          echo "setup_nr=$(echo "$MATRIX" | jq length)" >> $GITHUB_OUTPUT
        env:
          CIBW_ARCHS_MACOS: "x86_64 arm64"
          CIBW_SKIP: pp*
          # CIBW_BUILD: cp39-* #TODO only for development
          # CIBW_BUILD: cp39-manylinux_x86_64 #TODO only for development
    outputs:
      setups: ${{ steps.create-matrix.outputs.setup_matrix }}
      setupNr: ${{ steps.create-matrix.outputs.setup_nr }}
      versionNr: ${{ steps.version-number.outputs.version_number }}
      onTag: ${{ steps.check-for-tag.outputs.on_tag }}

  build_wheels:
    name: Build ${{ matrix.identifier }} wheel
    needs: preparations
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.preparations.outputs.setups) }}

    steps:
      - uses: actions/checkout@v4
        with:
          repository: ${{ inputs.REPOSITORY }}
          ref: ${{ inputs.REF }}

      - uses: actions/setup-python@v4
        name: Install Python #Necessary for macos because default python version is too low for cibuildwheel
        with:
          python-version: "3.11"

      - name: Build wheel
        uses: pypa/cibuildwheel@v2.16.5
        with:
          only: ${{ matrix.identifier }}
        env:
          CIBW_BUILD_VERBOSITY: 1

      - uses: actions/upload-artifact@v3
        with:
          path: ./wheelhouse/*.whl
          if-no-files-found: error

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    needs: preparations
    steps:
      - uses: actions/checkout@v4
        with:
          repository: ${{ inputs.REPOSITORY }}
          ref: ${{ inputs.REF }}

      - name: Build sdist
        run: pipx run build --sdist

      - uses: actions/upload-artifact@v3
        with:
          path: dist/*.tar.gz

  upload_pypi:
    name: Upload to PyPI
    needs: [preparations, build_wheels, build_sdist]
    if: always() && needs.preparations.result == 'success' && inputs.DO_DEPLOY
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.ENVIRONMENT }}
      url: ${{ vars.PYPI_URL }}
    steps:
      - name: Verify being on a tag
        run: |
          if [[ "${{ env.ON_TAG }}" != "1" ]]; then
            echo "Error: Asked for deploying without a tag!"
            exit 1
          fi
        env: 
          ON_TAG: ${{ needs.preparations.outputs.onTag }}

      - uses: actions/download-artifact@v3
        with:
          name: artifact
          path: dist #unpacks default artifact into dist/

      - uses: pypa/gh-action-pypi-publish@v1.8.11
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          repository-url: ${{ vars.PYPI_UPLOAD_URL }}
          skip-existing: ${{ inputs.SKIP_EXISTING }}

      - name: Verify upload
        if: vars.PYPI_QUERY_URL != ''
        run: |
          python3 -c "import os,subprocess,json ;\
          local_files = os.listdir('dist') ;\
          local_files.sort() ;\
          response_json = json.loads(subprocess.check_output(['curl', '-sX', 'GET', '${{ vars.PYPI_QUERY_URL }}/${{ needs.preparations.outputs.versionNr }}/json']).decode()) ;\
          remote_files = [file_obj['filename'] for file_obj in response_json['urls'] if file_obj['packagetype'] in ['sdist', 'bdist_wheel']] ;\
          remote_files.sort() ;\
          print('Local Files:') ;\
          print('\n'.join(local_files)) ;\
          print('Remote Files:') ;\
          print('\n'.join(remote_files)) ;\
          diff = list(set(remote_files) - set(local_files)) ;\
          print('The following files are different:\n','\n'.join(diff)) if diff else print('The list of files is the same.') ;\
          exit(1) if diff else exit(0);"

      - name: Verify completeness
        run: |
          file_count=$(ls -1q dist | wc -l)
          expected_file_count=$((expected_wheel_number + 1)) #wheels + 1 sdist
          if [ "$file_count" -ne "$expected_file_count" ]; then
            echo "Error: File count mismatch. Expected: $expected_file_count, Actual: $file_count"
            exit 1
          fi
          echo "File count verified. Total files: $file_count"
        env:
          expected_wheel_number: ${{needs.preparations.outputs.setupNr}}

